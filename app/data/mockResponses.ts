/**
 * Mock AI 响应数据 - 流式格式（支持基础markdown和表格）
 *
 * @fileoverview 包含用于模拟AI聊天响应的数据和工具函数
 * @author ChatUI Demo
 * @since 1.0.0
 */

/**
 * Mock AI 响应流数据集合
 * 包含5种不同类型的AI响应内容，展示丰富的Markdown格式和表格渲染效果
 *
 * @type {string[]}
 * @readonly
 * @description 每个字符串都是完整的Markdown格式的AI响应，包含：
 * - 销售报告：丰富的基础Markdown语法（标题、列表、引用、代码、强调等），无表格
 * - 技术分析：完整的表格展示和各种Markdown语法组合
 * - 用户体验：UX设计最佳实践和标准表格
 * - 项目管理：敏捷开发流程和团队管理表格
 * - 数据分析：数据源评估和分析方法对比表格
 */
export const mockAIResponseStreams = [
  // 销售报告类型
  "# 2025年第一季度销售业绩报告\n\n## 📊 整体业绩概况\n\n第一季度我们取得了**令人鼓舞的业绩表现**，总销售额达到 **381.5万元**，同比增长 **5.7%**。这一成绩得益于团队的不懈努力和市场策略的精准执行。\n\n### 月度表现亮点\n\n**一月份**：开局稳健\n- 销售额：`120.5万元`\n- 增长率：+5.2%（同比）\n- 主力产品：手机、电脑类目表现稳定\n- 目标完成率：**98%**\n\n**二月份**：春节影响下的调整期\n- 销售额：`110.2万元`  \n- 增长态势：+3.1%（同比），-8.6%（环比）\n- 重点发力：平板和配件品类\n- 完成情况：**92%**\n\n**三月份**：强势反弹的爆发期 🚀\n- 销售额：`150.8万元`\n- 惊人增长：+8.9%（同比），+36.8%（环比）\n- 明星产品：***智能手表*** 单月销售破纪录\n- 超额完成：**105%**\n\n## 🎯 产品类别深度分析\n\n### 智能手机业务\n\n作为我们的**核心业务板块**，智能手机继续占据主导地位：\n\n- 市场份额：占总销售额的 **45%**\n- 利润表现：毛利率达到 `18.5%`\n- 库存效率：年化周转 **6.2次**\n- 市场趋势：📈 持续上升，5G换机潮带来新机遇\n\n*关键成功因素*：\n1. 产品线覆盖全面，从入门到旗舰应有尽有\n2. 与主要渠道商关系稳固\n3. 售后服务体系完善，客户满意度高\n\n### 笔记本电脑事业部\n\n在远程办公趋势推动下，笔记本业务稳步发展：\n\n- 销售贡献：**28%** 的营收占比\n- 盈利能力：毛利率 `22.1%`，高于手机业务\n- 运营效率：库存周转 **4.8次**\n- 发展态势：📊 保持稳定，商务机型需求旺盛\n\n> **战略重点**：继续深耕B端市场，与企业客户建立长期合作关系。轻薄本和游戏本两条产品线并行发展。\n\n### 智能手表新兴业务 ⭐\n\n本季度最大的**惊喜来源**，智能手表业务实现爆发式增长：\n\n- 快速增长：从10%跃升至 **15%** 的市场份额\n- 超高利润：毛利率高达 `35.2%`\n- 高效运转：库存周转达到 **8.1次**\n- 强劲势头：🚀 爆发式增长，消费者接受度快速提升\n\n***成功要素解析***：\n- 健康监测功能契合消费趋势\n- 时尚外观设计吸引年轻群体  \n- 生态链整合提升用户粘性\n- 精准的社交媒体营销策略\n\n### 配件产品线\n\n虽然占比相对较小，但**配件业务展现出强劲的盈利能力**：\n\n- 营收占比：**12%**\n- 利润水平：毛利率 `28.7%`\n- 周转效率：**12.3次**，库存管理最为高效\n- 增长趋势：📈 稳步上升，与主产品形成良好协同\n\n## 💡 战略洞察与建议\n\n### 核心优势\n\n```\n✅ 产品组合均衡，风险分散\n✅ 智能手表业务崛起，成为新增长引擎  \n✅ 整体盈利能力稳健提升\n✅ 库存管理日趋精细化\n```\n\n### 关键挑战\n\n```\n⚠️  传统手机市场增长放缓\n⚠️  供应链成本压力持续\n⚠️  新兴品牌竞争加剧\n⚠️  消费者需求更加多样化\n```\n\n### 下季度行动计划\n\n1. **智能手表业务**：\n   - 扩大产能，满足旺盛需求\n   - 开发更多健康功能，深化差异化优势\n   - 建立独立的营销团队和渠道网络\n\n2. **手机业务**：\n   - 聚焦高端市场，提升品牌溢价能力\n   - 加强5G产品线布局\n   - 优化成本结构，应对价格竞争\n\n3. **渠道建设**：\n   - 强化线上线下一体化运营\n   - 拓展三四线城市覆盖\n   - 提升客户服务体验\n\n---\n\n> 💼 **总结**：第一季度的成功为全年奠定了坚实基础。智能手表的突破性表现证明了我们在新兴市场的敏锐洞察力和执行能力。接下来，我们将继续保持**创新驱动**，**客户导向**的发展理念，向着年度目标稳步迈进。\n\n*报告撰写：销售分析团队 | 数据截止：2025年3月31日*",

  // 技术分析类型
  "# 前端技术架构分析报告\n\n## 现代前端框架对比\n\n| 框架 | 学习曲线 | 性能表现 | 生态系统 | 社区活跃度 | 企业采用率 | 推荐指数 |\n|:-----|:--------:|:--------:|:--------:|:----------:|:----------:|:--------:|\n| React | 中等 | ⭐⭐⭐⭐ | 🌟🌟🌟🌟🌟 | 极高 | 87% | ⭐⭐⭐⭐⭐ |\n| Vue.js | 容易 | ⭐⭐⭐⭐⭐ | 🌟🌟🌟🌟 | 很高 | 64% | ⭐⭐⭐⭐⭐ |\n| Angular | 困难 | ⭐⭐⭐⭐ | 🌟🌟🌟🌟 | 高 | 52% | ⭐⭐⭐ |\n| Svelte | 中等 | ⭐⭐⭐⭐⭐ | 🌟🌟🌟 | 中等 | 23% | ⭐⭐⭐⭐ |\n\n## 状态管理方案评估\n\n| 方案 | 适用项目规模 | 学习成本 | 性能影响 | DevTools | 类型支持 |\n|:-----|:------------:|:--------:|:--------:|:--------:|:--------:|\n| Redux Toolkit | 大型 | 高 | 低 | 🔧🔧🔧🔧🔧 | TypeScript |\n| Zustand | 中小型 | 低 | 极低 | 🔧🔧🔧 | TypeScript |\n| Recoil | 中大型 | 中 | 低 | 🔧🔧🔧🔧 | TypeScript |\n| Context API | 小型 | 极低 | 中 | 🔧🔧 | 原生支持 |\n| MobX | 中型 | 中 | 低 | 🔧🔧🔧🔧 | TypeScript |\n\n### 性能优化指标对比\n\n| 优化策略 | 首屏时间改善 | 包体积减少 | 实施难度 | 维护成本 |\n|:---------|:------------:|:----------:|:--------:|:--------:|\n| 代码分割 | 40-60% | 60-80% | 中等 | 低 |\n| 懒加载 | 30-50% | 0% | 容易 | 极低 |\n| Tree Shaking | 10-20% | 20-40% | 容易 | 极低 |\n| CDN缓存 | 50-70% | 0% | 容易 | 低 |\n| Service Worker | 80-90% | 0% | 困难 | 高 |\n\n> **技术选型建议**：根据团队技术栈和项目规模选择合适的方案。对于新项目，推荐 **React + Zustand** 或 **Vue 3 + Pinia** 的组合。",

  // 用户体验类型
  "# UX设计最佳实践指南\n\n## 可访问性设计标准（WCAG 2.1）\n\n| 级别 | 颜色对比度 | 字体最小尺寸 | 触摸目标 | 键盘导航 | 屏幕阅读器 |\n|:----:|:----------:|:------------:|:--------:|:--------:|:----------:|\n| A | 3:1 | 14px | 44x44px | 必需 | 基础支持 |\n| AA | 4.5:1 | 16px | 44x44px | 完整 | 完整支持 |\n| AAA | 7:1 | 18px | 44x44px | 完整 | 完整支持 |\n\n## 移动端设计响应式断点\n\n| 设备类型 | 屏幕宽度 | 设计重点 | 交互方式 | 性能要求 |\n|:---------|:--------:|:--------:|:--------:|:--------:|\n| 手机 | <768px | 单列布局 | 触摸优先 | 极高 |\n| 平板 | 768-1024px | 灵活布局 | 触摸+键盘 | 高 |\n| 桌面 | >1024px | 多列布局 | 鼠标+键盘 | 中等 |\n| 大屏 | >1440px | 宽屏优化 | 精确操作 | 中等 |\n\n### 用户体验指标基准\n\n| 指标 | 优秀 | 良好 | 需改进 | 影响因子 |\n|:-----|:----:|:----:|:------:|:--------:|\n| 页面加载时间 | <1s | 1-3s | >3s | ⭐⭐⭐⭐⭐ |\n| 首次内容绘制 | <1.2s | 1.2-2.4s | >2.4s | ⭐⭐⭐⭐ |\n| 交互延迟 | <100ms | 100-300ms | >300ms | ⭐⭐⭐⭐⭐ |\n| 累积布局偏移 | <0.1 | 0.1-0.25 | >0.25 | ⭐⭐⭐ |\n| 任务完成率 | >90% | 70-90% | <70% | ⭐⭐⭐⭐⭐ |\n\n## 设计系统组件优先级\n\n| 组件类型 | 开发优先级 | 复用频率 | 维护复杂度 | ROI评分 |\n|:---------|:----------:|:--------:|:----------:|:-------:|\n| 按钮 | P0 | 极高 | 低 | 9.5/10 |\n| 表单控件 | P0 | 很高 | 中 | 9.0/10 |\n| 导航组件 | P0 | 高 | 中 | 8.5/10 |\n| 卡片容器 | P1 | 高 | 低 | 8.0/10 |\n| 数据表格 | P1 | 中 | 高 | 7.0/10 |\n| 图表组件 | P2 | 中 | 很高 | 6.5/10 |\n\n> **设计原则**：始终以用户为中心，遵循简洁、一致、可访问的设计理念。定期进行可用性测试，基于数据驱动设计决策。",

  // 项目管理类型
  "# 敏捷项目管理实践手册\n\n## 团队角色与职责分配\n\n| 角色 | 主要职责 | 时间投入 | 技能要求 | 汇报关系 |\n|:-----|:---------|:--------:|:--------:|:--------:|\n| Product Owner | 需求管理、优先级排序 | 100% | 业务理解、沟通 | 业务负责人 |\n| Scrum Master | 流程促进、障碍清除 | 50-100% | 敏捷方法、协调 | 技术负责人 |\n| 开发工程师 | 功能开发、代码评审 | 100% | 技术技能、协作 | Tech Lead |\n| 测试工程师 | 质量保证、自动化 | 100% | 测试技能、工具 | QA Lead |\n| UI/UX设计师 | 界面设计、用户体验 | 70% | 设计技能、用户思维 | Design Lead |\n\n## Sprint计划与执行矩阵\n\n| Sprint阶段 | 持续时间 | 参与人员 | 主要产出 | 成功标准 |\n|:-----------|:--------:|:--------:|:--------:|:--------:|\n| 计划会议 | 2-4小时 | 全团队 | Sprint Backlog | 目标明确、工作量合理 |\n| 每日站会 | 15分钟 | 开发团队 | 进度同步 | 问题及时暴露 |\n| 评审会议 | 1-2小时 | 全团队+利益相关者 | 产品增量 | 满足完成定义 |\n| 回顾会议 | 1小时 | 全团队 | 改进计划 | 至少3个改进点 |\n\n### 项目风险评估表\n\n| 风险类型 | 发生概率 | 影响程度 | 风险等级 | 缓解策略 | 负责人 |\n|:---------|:--------:|:--------:|:--------:|:--------:|:------:|\n| 需求变更 | 高 | 中 | 🔴 高 | 变更控制流程 | PO |\n| 技术难题 | 中 | 高 | 🔴 高 | 技术预研、专家咨询 | Tech Lead |\n| 人员流失 | 低 | 高 | 🟡 中 | 知识分享、备份培养 | Manager |\n| 外部依赖 | 中 | 中 | 🟡 中 | 提前对接、备选方案 | SM |\n| 质量问题 | 低 | 中 | 🟢 低 | 自动化测试、代码审查 | QA |\n\n## 团队效能指标追踪\n\n| 指标名称 | 当前值 | 目标值 | 趋势 | 改进建议 |\n|:---------|:------:|:------:|:----:|:--------:|\n| 速度 (Story Points) | 32 | 40 | 📈 | 减少技术债务 |\n| 燃尽图达成率 | 85% | 90% | 📈 | 改进估算精度 |\n| 缺陷逃逸率 | 5% | <3% | 📉 | 强化测试覆盖 |\n| 代码覆盖率 | 78% | 85% | 📈 | 补充单元测试 |\n| 团队满意度 | 7.8/10 | >8.0 | 📊 | 改善协作工具 |\n\n> **管理心得**：工具是手段，沟通才是核心。建立透明的信息共享机制，让每个人都能看到项目全貌和个人贡献。",

  // 数据分析类型
  "# 数据分析全流程指南\n\n## 数据源质量评估\n\n| 数据源 | 完整性 | 准确性 | 一致性 | 时效性 | 可用性 | 质量评分 |\n|:-------|:------:|:------:|:------:|:------:|:------:|:--------:|\n| 用户行为日志 | 95% | 90% | 88% | 实时 | 99% | ⭐⭐⭐⭐ |\n| 交易数据 | 99% | 98% | 95% | 准实时 | 99.9% | ⭐⭐⭐⭐⭐ |\n| 用户画像 | 85% | 85% | 75% | 每日更新 | 95% | ⭐⭐⭐ |\n| 第三方API | 80% | 92% | 70% | 按需 | 90% | ⭐⭐⭐ |\n| 人工标注 | 100% | 95% | 90% | 批次更新 | 85% | ⭐⭐⭐⭐ |\n\n## 分析方法对比矩阵\n\n| 分析方法 | 适用场景 | 技术难度 | 结果可解释性 | 计算成本 | 准确度 |\n|:---------|:--------:|:--------:|:------------:|:--------:|:------:|\n| 描述性统计 | 现状分析 | 低 | ⭐⭐⭐⭐⭐ | 低 | 85% |\n| 线性回归 | 趋势预测 | 低 | ⭐⭐⭐⭐ | 低 | 75% |\n| 决策树 | 分类问题 | 中 | ⭐⭐⭐⭐ | 中 | 82% |\n| 随机森林 | 复杂分类 | 中 | ⭐⭐⭐ | 中 | 88% |\n| 神经网络 | 复杂模式 | 高 | ⭐⭐ | 高 | 92% |\n| 深度学习 | 非结构化数据 | 极高 | ⭐ | 极高 | 95% |\n\n### 业务指标监控仪表板\n\n| 指标类型 | 指标名称 | 当前值 | 目标值 | 同比变化 | 状态 |\n|:---------|:---------|:------:|:------:|:--------:|:----:|\n| 用户增长 | DAU | 125.6K | 130K | +15.2% | 🟡 |\n| 用户增长 | MAU | 890.2K | 1M | +22.8% | 🟢 |\n| 用户留存 | 次日留存率 | 68% | 70% | +3.5% | 🟡 |\n| 用户留存 | 7日留存率 | 42% | 45% | +1.8% | 🔴 |\n| 商业变现 | ARPU | ¥48.5 | ¥50 | +8.9% | 🟡 |\n| 商业变现 | 付费转化率 | 5.2% | 6% | +12.3% | 🟢 |\n\n## A/B测试实验设计\n\n| 实验名称 | 假设 | 样本量 | 置信度 | 实验周期 | 成功指标 |\n|:---------|:-----|:------:|:------:|:--------:|:--------:|\n| 首页改版 | 新设计提升转化率 | 10,000 | 95% | 2周 | 转化率+20% |\n| 推荐算法 | 个性化推荐增加点击 | 50,000 | 99% | 4周 | CTR+15% |\n| 定价策略 | 动态定价提升收入 | 20,000 | 95% | 3周 | ARPU+10% |\n| 消息推送 | 智能推送减少流失 | 30,000 | 95% | 1周 | 流失率-25% |\n\n> **数据洞察**：数据不会说谎，但需要正确的问题来引导。建立数据驱动的决策文化，让每个决策都有数据支撑，但也要保持对业务直觉的敏感度。",
];

/**
 * 根据用户输入智能匹配对应的AI响应流
 * 使用关键词匹配算法，根据用户输入的内容类型返回最相关的预设响应
 *
 * @param {string} userInput - 用户输入的消息内容
 * @returns {string} 匹配的AI响应流字符串，包含完整的Markdown格式内容
 *
 * @example
 * ```typescript
 * // 匹配销售相关内容
 * const salesResponse = getContextualAIResponseStream("请分析销售数据");
 *
 * // 匹配技术相关内容
 * const techResponse = getContextualAIResponseStream("前端技术架构选择");
 *
 * // 匹配用户体验相关内容
 * const uxResponse = getContextualAIResponseStream("用户体验优化建议");
 * ```
 *
 * @description 匹配规则：
 * - 包含"销售"、"数据"、"报告" → 返回销售数据报告
 * - 包含"技术"、"架构"、"开发" → 返回技术架构分析
 * - 包含"用户"、"体验"、"设计" → 返回UX设计指南
 * - 包含"项目"、"管理"、"团队" → 返回项目管理手册
 * - 包含"分析"、"统计"、"可视化" → 返回数据分析指南
 * - 无匹配关键词 → 随机返回一个响应
 *
 * @since 1.0.0
 */
export function getContextualAIResponseStream(userInput: string): string {
  const input = userInput.toLowerCase();

  if (
    input.includes("销售") ||
    input.includes("数据") ||
    input.includes("报告")
  ) {
    return mockAIResponseStreams[0]; // 销售报告
  } else if (
    input.includes("技术") ||
    input.includes("架构") ||
    input.includes("开发")
  ) {
    return mockAIResponseStreams[1]; // 技术分析
  } else if (
    input.includes("用户") ||
    input.includes("体验") ||
    input.includes("设计")
  ) {
    return mockAIResponseStreams[2]; // 用户体验
  } else if (
    input.includes("项目") ||
    input.includes("管理") ||
    input.includes("团队")
  ) {
    return mockAIResponseStreams[3]; // 项目管理
  } else if (
    input.includes("分析") ||
    input.includes("统计") ||
    input.includes("可视化")
  ) {
    return mockAIResponseStreams[4]; // 数据分析
  }

  // 默认随机返回
  const randomIndex = Math.floor(Math.random() * mockAIResponseStreams.length);
  return mockAIResponseStreams[randomIndex];
}

/**
 * 检测文本中的表格内容并按行分割
 * @param {string} text - 待检测的文本内容
 * @returns {string[]} 分割后的数据块数组
 */
function splitContentIntelligently(text: string): string[] {
  const lines = text.split("\n");
  const chunks: string[] = [];
  let currentChunk = "";
  let inTable = false;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];

    // 检测表格开始（表头行）
    if (
      line.trim().match(/^\|.*\|$/) &&
      (line.match(/\|/g) || []).length >= 3
    ) {
      // 如果之前有累积的内容，先发送
      if (currentChunk.trim()) {
        chunks.push(currentChunk + "\n\n");
        currentChunk = "";
      }
      inTable = true;
      chunks.push(line + "\n");

      // 检查下一行是否为分隔符行，如果是也一起发送
      if (
        i + 1 < lines.length &&
        lines[i + 1].trim().match(/^\|[\s\-:|]+\|$/)
      ) {
        chunks.push(lines[i + 1] + "\n");
        i++; // 跳过分隔符行
      }
    }
    // 在表格中的数据行
    else if (inTable && line.trim().match(/^\|.*\|$/)) {
      chunks.push(line + "\n");
    }
    // 表格结束或其他内容
    else {
      if (inTable) {
        // 表格结束，添加分隔符
        chunks.push("\n");
        inTable = false;
      }

      // 普通内容按段落分组
      if (line.trim() === "") {
        if (currentChunk.trim()) {
          chunks.push(currentChunk + "\n\n");
          currentChunk = "";
        }
      } else {
        currentChunk += line + "\n";
      }
    }
  }

  // 处理最后的内容
  if (currentChunk.trim()) {
    chunks.push(currentChunk);
  }

  return chunks.filter((chunk) => chunk.trim().length > 0);
}

/**
 * 模拟AI流式数据传输 - 支持表格按行传输
 * 智能分析内容结构，对表格按行传输，其他内容按段落传输，提供更自然的显示效果
 *
 * @param {string} userInput - 用户输入的消息，用于匹配对应的AI响应
 * @param {(chunk: string) => void} onChunk - 接收数据块的回调函数
 * @param {() => void} onComplete - 传输完成时的回调函数
 * @returns {void}
 *
 * @example
 * ```typescript
 * simulateStreamData(
 *   "请分析销售数据",
 *   (chunk) => {
 *     console.log('收到数据块:', chunk);
 *     // 更新UI显示新的文本块
 *   },
 *   () => {
 *     console.log('传输完成');
 *     // 执行完成后的操作
 *   }
 * );
 * ```
 *
 * @description 传输配置：
 * - 表格内容：按行传输，每行一个chunk
 * - 普通内容：按段落传输
 * - 传输间隔：表格行600ms，普通段落400ms
 * - 支持控制台调试输出
 * - 自动清理定时器资源
 *
 * @note 该函数会在控制台输出调试信息，格式为：【chunk:索引】数据块内容
 *
 * @since 1.0.0
 */
export function simulateStreamData(
  userInput: string,
  onChunk: (chunk: string) => void,
  onComplete: () => void
) {
  const stream = getContextualAIResponseStream(userInput);
  const chunks = splitContentIntelligently(stream);
  let index = 0;

  const interval = setInterval(() => {
    if (index < chunks.length) {
      const chunk = chunks[index];
      console.log(`【dd】【chunk:${index}】`, chunk);
      onChunk(chunk);
      index++;
    } else {
      clearInterval(interval);
      onComplete();
    }
  }, 600); // 表格行之间的间隔，让动画更明显
}
