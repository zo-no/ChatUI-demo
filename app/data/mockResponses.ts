// Mock AI 响应数据 - 流式格式（支持基础markdown和表格）
export const mockAIResponseStreams = [
  // 销售报告类型
  "## 2025年第一季度销售数据报告\n\n### 月度销售表现\n\n| 月份 | 销售额(万元) | 同比增长 | 环比增长 | 主要产品 | 完成率 |\n|:-----|------------:|:--------:|:--------:|:---------|:------:|\n| 一月 | 120.5 | +5.2% | -8.3% | 手机、电脑 | 98% |\n| 二月 | 110.2 | +3.1% | -8.6% | 平板、配件 | 92% |\n| 三月 | 150.8 | +8.9% | +36.8% | 智能手表 | 105% |\n| **合计** | **381.5** | **+5.7%** | **-** | **全品类** | **98%** |\n\n### 产品类别分析\n\n| 产品类别 | 销售占比 | 利润率 | 库存周转 | 市场趋势 |\n|:---------|:--------:|:------:|:--------:|:--------:|\n| 智能手机 | 45% | 18.5% | 6.2次 | 📈 上升 |\n| 笔记本电脑 | 28% | 22.1% | 4.8次 | 📊 稳定 |\n| 智能手表 | 15% | 35.2% | 8.1次 | 🚀 爆发 |\n| 配件产品 | 12% | 28.7% | 12.3次 | 📈 上升 |\n\n### 总体分析\n\n第一季度业绩表现良好，特别是三月份实现了显著增长。主要亮点：\n\n1. **产品创新**：新款智能手表广受市场欢迎，单月销售突破预期\n2. **营销策略**：精准投放提升了转化率，ROI达到3.2:1\n3. **渠道拓展**：线上线下协同发展，O2O模式初见成效\n\n> **关键建议**：继续加大智能手表产品线的投入，同时关注供应链管理以支撑快速增长。",

  // 技术分析类型
  "# 前端技术架构分析报告\n\n## 现代前端框架对比\n\n| 框架 | 学习曲线 | 性能表现 | 生态系统 | 社区活跃度 | 企业采用率 | 推荐指数 |\n|:-----|:--------:|:--------:|:--------:|:----------:|:----------:|:--------:|\n| React | 中等 | ⭐⭐⭐⭐ | 🌟🌟🌟🌟🌟 | 极高 | 87% | ⭐⭐⭐⭐⭐ |\n| Vue.js | 容易 | ⭐⭐⭐⭐⭐ | 🌟🌟🌟🌟 | 很高 | 64% | ⭐⭐⭐⭐⭐ |\n| Angular | 困难 | ⭐⭐⭐⭐ | 🌟🌟🌟🌟 | 高 | 52% | ⭐⭐⭐ |\n| Svelte | 中等 | ⭐⭐⭐⭐⭐ | 🌟🌟🌟 | 中等 | 23% | ⭐⭐⭐⭐ |\n\n## 状态管理方案评估\n\n| 方案 | 适用项目规模 | 学习成本 | 性能影响 | DevTools | 类型支持 |\n|:-----|:------------:|:--------:|:--------:|:--------:|:--------:|\n| Redux Toolkit | 大型 | 高 | 低 | 🔧🔧🔧🔧🔧 | TypeScript |\n| Zustand | 中小型 | 低 | 极低 | 🔧🔧🔧 | TypeScript |\n| Recoil | 中大型 | 中 | 低 | 🔧🔧🔧🔧 | TypeScript |\n| Context API | 小型 | 极低 | 中 | 🔧🔧 | 原生支持 |\n| MobX | 中型 | 中 | 低 | 🔧🔧🔧🔧 | TypeScript |\n\n### 性能优化指标对比\n\n| 优化策略 | 首屏时间改善 | 包体积减少 | 实施难度 | 维护成本 |\n|:---------|:------------:|:----------:|:--------:|:--------:|\n| 代码分割 | 40-60% | 60-80% | 中等 | 低 |\n| 懒加载 | 30-50% | 0% | 容易 | 极低 |\n| Tree Shaking | 10-20% | 20-40% | 容易 | 极低 |\n| CDN缓存 | 50-70% | 0% | 容易 | 低 |\n| Service Worker | 80-90% | 0% | 困难 | 高 |\n\n> **技术选型建议**：根据团队技术栈和项目规模选择合适的方案。对于新项目，推荐 **React + Zustand** 或 **Vue 3 + Pinia** 的组合。",

  // 用户体验类型
  "# UX设计最佳实践指南\n\n## 可访问性设计标准（WCAG 2.1）\n\n| 级别 | 颜色对比度 | 字体最小尺寸 | 触摸目标 | 键盘导航 | 屏幕阅读器 |\n|:----:|:----------:|:------------:|:--------:|:--------:|:----------:|\n| A | 3:1 | 14px | 44x44px | 必需 | 基础支持 |\n| AA | 4.5:1 | 16px | 44x44px | 完整 | 完整支持 |\n| AAA | 7:1 | 18px | 44x44px | 完整 | 完整支持 |\n\n## 移动端设计响应式断点\n\n| 设备类型 | 屏幕宽度 | 设计重点 | 交互方式 | 性能要求 |\n|:---------|:--------:|:--------:|:--------:|:--------:|\n| 手机 | <768px | 单列布局 | 触摸优先 | 极高 |\n| 平板 | 768-1024px | 灵活布局 | 触摸+键盘 | 高 |\n| 桌面 | >1024px | 多列布局 | 鼠标+键盘 | 中等 |\n| 大屏 | >1440px | 宽屏优化 | 精确操作 | 中等 |\n\n### 用户体验指标基准\n\n| 指标 | 优秀 | 良好 | 需改进 | 影响因子 |\n|:-----|:----:|:----:|:------:|:--------:|\n| 页面加载时间 | <1s | 1-3s | >3s | ⭐⭐⭐⭐⭐ |\n| 首次内容绘制 | <1.2s | 1.2-2.4s | >2.4s | ⭐⭐⭐⭐ |\n| 交互延迟 | <100ms | 100-300ms | >300ms | ⭐⭐⭐⭐⭐ |\n| 累积布局偏移 | <0.1 | 0.1-0.25 | >0.25 | ⭐⭐⭐ |\n| 任务完成率 | >90% | 70-90% | <70% | ⭐⭐⭐⭐⭐ |\n\n## 设计系统组件优先级\n\n| 组件类型 | 开发优先级 | 复用频率 | 维护复杂度 | ROI评分 |\n|:---------|:----------:|:--------:|:----------:|:-------:|\n| 按钮 | P0 | 极高 | 低 | 9.5/10 |\n| 表单控件 | P0 | 很高 | 中 | 9.0/10 |\n| 导航组件 | P0 | 高 | 中 | 8.5/10 |\n| 卡片容器 | P1 | 高 | 低 | 8.0/10 |\n| 数据表格 | P1 | 中 | 高 | 7.0/10 |\n| 图表组件 | P2 | 中 | 很高 | 6.5/10 |\n\n> **设计原则**：始终以用户为中心，遵循简洁、一致、可访问的设计理念。定期进行可用性测试，基于数据驱动设计决策。",

  // 项目管理类型
  "# 敏捷项目管理实践手册\n\n## 团队角色与职责分配\n\n| 角色 | 主要职责 | 时间投入 | 技能要求 | 汇报关系 |\n|:-----|:---------|:--------:|:--------:|:--------:|\n| Product Owner | 需求管理、优先级排序 | 100% | 业务理解、沟通 | 业务负责人 |\n| Scrum Master | 流程促进、障碍清除 | 50-100% | 敏捷方法、协调 | 技术负责人 |\n| 开发工程师 | 功能开发、代码评审 | 100% | 技术技能、协作 | Tech Lead |\n| 测试工程师 | 质量保证、自动化 | 100% | 测试技能、工具 | QA Lead |\n| UI/UX设计师 | 界面设计、用户体验 | 70% | 设计技能、用户思维 | Design Lead |\n\n## Sprint计划与执行矩阵\n\n| Sprint阶段 | 持续时间 | 参与人员 | 主要产出 | 成功标准 |\n|:-----------|:--------:|:--------:|:--------:|:--------:|\n| 计划会议 | 2-4小时 | 全团队 | Sprint Backlog | 目标明确、工作量合理 |\n| 每日站会 | 15分钟 | 开发团队 | 进度同步 | 问题及时暴露 |\n| 评审会议 | 1-2小时 | 全团队+利益相关者 | 产品增量 | 满足完成定义 |\n| 回顾会议 | 1小时 | 全团队 | 改进计划 | 至少3个改进点 |\n\n### 项目风险评估表\n\n| 风险类型 | 发生概率 | 影响程度 | 风险等级 | 缓解策略 | 负责人 |\n|:---------|:--------:|:--------:|:--------:|:--------:|:------:|\n| 需求变更 | 高 | 中 | 🔴 高 | 变更控制流程 | PO |\n| 技术难题 | 中 | 高 | 🔴 高 | 技术预研、专家咨询 | Tech Lead |\n| 人员流失 | 低 | 高 | 🟡 中 | 知识分享、备份培养 | Manager |\n| 外部依赖 | 中 | 中 | 🟡 中 | 提前对接、备选方案 | SM |\n| 质量问题 | 低 | 中 | 🟢 低 | 自动化测试、代码审查 | QA |\n\n## 团队效能指标追踪\n\n| 指标名称 | 当前值 | 目标值 | 趋势 | 改进建议 |\n|:---------|:------:|:------:|:----:|:--------:|\n| 速度 (Story Points) | 32 | 40 | 📈 | 减少技术债务 |\n| 燃尽图达成率 | 85% | 90% | 📈 | 改进估算精度 |\n| 缺陷逃逸率 | 5% | <3% | 📉 | 强化测试覆盖 |\n| 代码覆盖率 | 78% | 85% | 📈 | 补充单元测试 |\n| 团队满意度 | 7.8/10 | >8.0 | 📊 | 改善协作工具 |\n\n> **管理心得**：工具是手段，沟通才是核心。建立透明的信息共享机制，让每个人都能看到项目全貌和个人贡献。",

  // 数据分析类型
  "# 数据分析全流程指南\n\n## 数据源质量评估\n\n| 数据源 | 完整性 | 准确性 | 一致性 | 时效性 | 可用性 | 质量评分 |\n|:-------|:------:|:------:|:------:|:------:|:------:|:--------:|\n| 用户行为日志 | 95% | 90% | 88% | 实时 | 99% | ⭐⭐⭐⭐ |\n| 交易数据 | 99% | 98% | 95% | 准实时 | 99.9% | ⭐⭐⭐⭐⭐ |\n| 用户画像 | 85% | 85% | 75% | 每日更新 | 95% | ⭐⭐⭐ |\n| 第三方API | 80% | 92% | 70% | 按需 | 90% | ⭐⭐⭐ |\n| 人工标注 | 100% | 95% | 90% | 批次更新 | 85% | ⭐⭐⭐⭐ |\n\n## 分析方法对比矩阵\n\n| 分析方法 | 适用场景 | 技术难度 | 结果可解释性 | 计算成本 | 准确度 |\n|:---------|:--------:|:--------:|:------------:|:--------:|:------:|\n| 描述性统计 | 现状分析 | 低 | ⭐⭐⭐⭐⭐ | 低 | 85% |\n| 线性回归 | 趋势预测 | 低 | ⭐⭐⭐⭐ | 低 | 75% |\n| 决策树 | 分类问题 | 中 | ⭐⭐⭐⭐ | 中 | 82% |\n| 随机森林 | 复杂分类 | 中 | ⭐⭐⭐ | 中 | 88% |\n| 神经网络 | 复杂模式 | 高 | ⭐⭐ | 高 | 92% |\n| 深度学习 | 非结构化数据 | 极高 | ⭐ | 极高 | 95% |\n\n### 业务指标监控仪表板\n\n| 指标类型 | 指标名称 | 当前值 | 目标值 | 同比变化 | 状态 |\n|:---------|:---------|:------:|:------:|:--------:|:----:|\n| 用户增长 | DAU | 125.6K | 130K | +15.2% | 🟡 |\n| 用户增长 | MAU | 890.2K | 1M | +22.8% | 🟢 |\n| 用户留存 | 次日留存率 | 68% | 70% | +3.5% | 🟡 |\n| 用户留存 | 7日留存率 | 42% | 45% | +1.8% | 🔴 |\n| 商业变现 | ARPU | ¥48.5 | ¥50 | +8.9% | 🟡 |\n| 商业变现 | 付费转化率 | 5.2% | 6% | +12.3% | 🟢 |\n\n## A/B测试实验设计\n\n| 实验名称 | 假设 | 样本量 | 置信度 | 实验周期 | 成功指标 |\n|:---------|:-----|:------:|:------:|:--------:|:--------:|\n| 首页改版 | 新设计提升转化率 | 10,000 | 95% | 2周 | 转化率+20% |\n| 推荐算法 | 个性化推荐增加点击 | 50,000 | 99% | 4周 | CTR+15% |\n| 定价策略 | 动态定价提升收入 | 20,000 | 95% | 3周 | ARPU+10% |\n| 消息推送 | 智能推送减少流失 | 30,000 | 95% | 1周 | 流失率-25% |\n\n> **数据洞察**：数据不会说谎，但需要正确的问题来引导。建立数据驱动的决策文化，让每个决策都有数据支撑，但也要保持对业务直觉的敏感度。"
];

// 随机选择一个响应流
export function getRandomAIResponseStream(): string {
  const randomIndex = Math.floor(Math.random() * mockAIResponseStreams.length);
  return mockAIResponseStreams[randomIndex];
}

// 根据用户输入返回相关响应流（简单的关键词匹配）
export function getContextualAIResponseStream(userInput: string): string {
  const input = userInput.toLowerCase();
  
  if (input.includes('销售') || input.includes('数据') || input.includes('报告')) {
    return mockAIResponseStreams[0]; // 销售报告
  } else if (input.includes('技术') || input.includes('架构') || input.includes('开发')) {
    return mockAIResponseStreams[1]; // 技术分析
  } else if (input.includes('用户') || input.includes('体验') || input.includes('设计')) {
    return mockAIResponseStreams[2]; // 用户体验
  } else if (input.includes('项目') || input.includes('管理') || input.includes('团队')) {
    return mockAIResponseStreams[3]; // 项目管理
  } else if (input.includes('分析') || input.includes('统计') || input.includes('可视化')) {
    return mockAIResponseStreams[4]; // 数据分析
  }
  
  return getRandomAIResponseStream(); // 默认随机返回
}

// 兼容旧版本 - 返回分块数组
export function getContextualAIResponseChunks(userInput: string): string[] {
  const stream = getContextualAIResponseStream(userInput);
  // 简单分割成小块进行流式传输模拟
  const chunks: string[] = [];
  const chunkSize = 50; // 每个块的字符数
  
  for (let i = 0; i < stream.length; i += chunkSize) {
    chunks.push(stream.substring(i, i + chunkSize));
  }
  
  return chunks;
}

// 兼容旧版本 - 返回完整响应字符串
export function getContextualAIResponse(userInput: string): string {
  return getContextualAIResponseStream(userInput);
}

// 模拟流式数据传输 - 模仿 1-1.html 的数据传输方式
export function simulateStreamData(userInput: string, onChunk: (chunk: string) => void, onComplete: () => void) {
  const stream = getContextualAIResponseStream(userInput);
  const chunkSize = 30; // 每次发送的字符数
  let index = 0;
  
  const interval = setInterval(() => {
    if (index < stream.length) {
      const chunk = stream.substring(index, Math.min(index + chunkSize, stream.length));
      onChunk(chunk);
      index += chunkSize;
    } else {
      clearInterval(interval);
      onComplete();
    }
  }, 100); // 每100ms发送一个chunk，更快的传输速度
} 